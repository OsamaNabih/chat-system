version: "3"
services:
  mysql:
    container_name: mysql
    image: mysql:8
    command: mysqld --default-authentication-plugin=mysql_native_password
    environment:
    - MYSQL_DATABASE=${DB_NAME}_${RAILS_ENV}
    - MYSQL_ROOT_PASSWORD=$DB_PASSWORD
    - MYSQL_PASSWORD=$DB_PASSWORD
    - DB_USERNAME=$DB_USERNAME
    ports:
    - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      # Initializing DB is not needed in rails applications
      # - ./init.sh:/docker-entrypoint-initdb.d/init.sh:ro
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1
      start_period: 20s
      interval: 5s
      timeout: 5s
      retries: 55

  elasticsearch:
    container_name: es-container
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.1
    environment:
      - xpack.security.enabled=false
      - "discovery.type=single-node"
    ports:
      - 9200:9200
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data

  redis:
    container_name: redis
    image: 'redis:6.0-alpine'
    command: redis-server
    ports:
      - '6379:6379'
    volumes:
      - redis-data:/data
    
  server:
    container_name: rails_server
    build: .
    ports:
      - '3000:3000'
    # volumes:
      # - .:/chat-system
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
      elasticsearch:
        condition: service_started
    environment:
      - MYSQL_HOST=mysql
      - REDIS_URL_SIDEKIQ=$REDIS_URL
      - ELASTICSEARCH_URL=$ELASTICSEARCH_URL
      - RAILS_ENV=$RAILS_ENV

    # env_file:
    #   - '.env'

  sidekiq:
    container_name: sidekiq
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
    build: .
    entrypoint: sidekiq -C config/sidekiq.yml
    # volumes:
      # - .:/chat-system
    environment:
      - REDIS_URL_SIDEKIQ=$REDIS_URL
      - ELASTICSEARCH_URL=$ELASTICSEARCH_URL
  
  whenever:
    container_name: cron
    depends_on:
      server:
        condition: service_started 
      mysql:
        condition: service_healthy
    build: .
    entrypoint: > 
            bash -c "service cron start && 
            touch log/cron.log &&
            whenever --clear-crontab && 
            whenever --update-crontab &&
            tail -f log/cron.log"
    # volumes:
      # - .:/chat-system

  # kibana:
  #   container_name: kb-container
  #   image: docker.elastic.co/kibana/kibana:7.17.1
  #   environment:
  #     - ELASTICSEARCH_HOSTS=http://es-container:9200
  #   networks:
  #     #- es-net
  #       static-network:
  #         ipv4_address: 172.20.128.5
  #   depends_on:
  #     - elasticsearch
  #   ports:
  #     - 5601:5601

volumes:
  mysql-data:
  elasticsearch-data:
  redis-data:
  .:
